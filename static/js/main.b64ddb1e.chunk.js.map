{"version":3,"sources":["reducers.js","serviceWorker.js","components/SearchBox.js","components/Card.js","components/Cardlist.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialSearchState","searchField","initialRobotState","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","SearchBox","searchChange","className","type","onChange","placeholder","Card","name","email","id","alt","src","CardList","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","React","PureComponent","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundry","connect","searchRobots","requestRobots","pending","dispatch","event","payload","target","value","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b64ddb1e.chunk.js","sourcesContent":["import {CHANGE_SEARCH_FIELD,\r\n      REQUEST_ROBOTS_PENDING,\r\n      REQUEST_ROBOTS_SUCCESS,\r\n      REQUEST_ROBOTS_FAILED,\r\n     } from './constants.js'\r\n\r\nconst initialSearchState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialSearchState, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD: \r\n        return Object.assign({}, state, {searchField: action.payload});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst initialRobotState = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialRobotState, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING: \r\n        return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n        return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED: \r\n        return Object.assign({}, state, {error: action.payload});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange }) => {\r\n    console.log('searchbox')\r\n    return(\r\n       \r\n    <div className='pa2'>\r\n       <input \r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='search'\r\n          onChange={searchChange}\r\n          placeholder='search for robots...'\r\n       /> \r\n     </div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;  ","import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n \r\n    return(\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow tc\">\r\n        <img alt='pht' src={`https://robohash.org/${id}`} />\r\n        <div>\r\n            <h2> { name } </h2>\r\n            <p> { email }</p>\r\n        </div>\r\n           \r\n     </div>\r\n\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log('cardlist')\r\n    return(\r\n        \r\n    <div>\r\n      \r\n        {\r\n          robots.map((user, i) => {\r\n              return (\r\n                   <Card \r\n                     key={i}  \r\n                     id={robots[i].id} \r\n                     name={robots[i].name} \r\n                     email={robots[i].email} \r\n                   />\r\n                   )\r\n            })\r\n        } \r\n     </div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    \r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor (props){\r\n        super(props)\r\n        this.state = {hasError: false}\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Something went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react';\r\n\r\nclass CounterButton extends React.PureComponent{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if(this.state.count !== nextState.count){\r\n         return true;\r\n        }\r\n         return false;\r\n    }\r\n\r\n    updateCount = () =>{\r\n        this.setState( state => {\r\n            return{count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        console.log('counterButton');\r\n        return(\r\n            <div>\r\n                <button color={'red'} onClick={this.updateCount} >count : {this.state.count} </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CounterButton;\r\n","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends React.PureComponent{\r\n  \r\n     shouldComponentUpdate(nextProps, nextState){\r\n         return false;\r\n     }\r\n\r\n     render(){\r\n         console.log('Header');\r\n         return ( \r\n            <div>\r\n              <h1 className='f1'>RoboFriends</h1>\r\n              <CounterButton color={'red'} />\r\n           </div>\r\n         )\r\n     }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/Cardlist';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport '../containers/App.css'\n\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    pending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n class App extends Component {  \n  \n   componentDidMount(){\n     this.props.onRequestRobots();\n   }\n\n   render() {\n\n   const { searchField, onSearchChange, robots, isPending } = this.props;\n   const filteredRobots = robots.filter( robot => {\n       return robot.name.toLowerCase().includes(searchField.toLowerCase());\n   });\n\n     return (\n         <div className=\"tc\">\n             <Header/>\n             <SearchBox searchChange={onSearchChange}/>\n             <Scroll>\n               { isPending ? <h1> Loading</h1> :\n               <ErrorBoundry>\n                  <CardList robots={filteredRobots} />\n               </ErrorBoundry>  \n               }\n             </Scroll>     \n         </div>\n    )\n         \n  }\n    \n}\n\n\n    \n  \nexport default  connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD,\r\n       REQUEST_ROBOTS_PENDING,\r\n       REQUEST_ROBOTS_SUCCESS,\r\n       REQUEST_ROBOTS_FAILED\r\n      } from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {\r\n      return response.json();\r\n    }) \r\n    .then( data => {\r\n       dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data});\r\n    })\r\n    .catch( error => {\r\n        dispatch({type: REQUEST_ROBOTS_FAILED, payload: error});\r\n    })\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';  \nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker'; \nimport App from './containers/App';\nimport './index.css'\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n//CREATE REDUX STORE\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store} >\n   <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register(); \n"],"sourceRoot":""}