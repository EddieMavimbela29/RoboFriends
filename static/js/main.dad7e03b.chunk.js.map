{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/Cardlist.js","components/Scroll.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","SearchBox","searchField","searchChange","className","type","onChange","placeholder","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","fetch","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dad7e03b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange }) => {\r\n \r\n    return(\r\n    <div className='pa2'>\r\n       <input \r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='search'\r\n          onChange={searchChange}\r\n          placeholder='search for robots...'\r\n       /> \r\n     </div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;  ","import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n \r\n    return(\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow tc\">\r\n        <img alt='pht' src={`https://robohash.org/${id}`} />\r\n        <div>\r\n            <h2> { name } </h2>\r\n            <p> { email }</p>\r\n        </div>\r\n           \r\n     </div>\r\n\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return(\r\n        \r\n    <div>\r\n        {\r\n          robots.map((user, i) => {\r\n              return (\r\n                   <Card \r\n                     key={i}  \r\n                     id={robots[i].id} \r\n                     name={robots[i].name} \r\n                     email={robots[i].email} \r\n                   />\r\n                   )\r\n            })\r\n        } \r\n     </div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    \r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/Cardlist';\nimport Scroll from '../components/Scroll';\nimport '../containers/App.css'\n\n class App extends Component {  \n    \n   constructor(){\n     super()\n\n     this.state = {\n       robots: [], \n       searchField: ''\n     }\n   }\n\n   componentDidMount(){\n     fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        this.setState({robots: users})\n      })\n   }\n\n   onSearchChange = (event) => {\n     this.setState({searchField: event.target.value});\n   };\n\n   render() {\n\n    const { robots, searchField } = this.state;\n  \n    const filteredRobots = robots.filter( robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if( !robots.length ){\n      return <h1> Loading</h1>\n    }else{\n    return (\n         <div className=\"tc\">\n             <h1 className='f2'> RoboFriends </h1>\n             <SearchBox searchChange={this.onSearchChange}/>\n             <Scroll>\n               <CardList robots={filteredRobots} />\n             </Scroll>     \n         </div>\n    );\n    }     \n  }\n    \n}\n\n\n    \n  \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';  \nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker'; \nimport App from './containers/App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}